#include <CapacitiveSensor.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define COMMON_PIN      2    // The common 'send' pin for all keys
#define NUM_OF_SAMPLES  10   // Higher number whens more delay but more consistent readings
#define CAP_THRESHOLD   500  // Capactive reading that triggers a note (adjust to fit your needs)
#define OLED_RESET     12 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(128, 64, &Wire, OLED_RESET);

// This macro creates a capacitance "key" sensor object for each key on the piano keyboard:
#define CS(Y) CapacitiveSensor(2, Y)

// Defines the pins that the keys are connected to:
CapacitiveSensor keys[] = {CS(3), CS(4), CS(5), CS(6)};

int on = 0;
int mode = 0;
int fun = 0;
int recm = 0;
int* notes;
char button = 0;
char REC = 0;
int recorded_button[200];
int pev_button;
char button_index = 0;
unsigned long start_time;
int note_time;

int recorded_time [200];
char time_index;

int sp = 10;      //Speaker Pin
int tp = 7;       //Trigger Pin
int ep = 8;       // Echo Pin
int c = 523;
int d = 587;
int e = 659;
int f = 698;     //These are the frequency      
int g = 784;     //values of the different notes
int a = 880;   
int b = 988;
int c2 = 1047;
int c1 = 262;
int d1 = 294;
int e1 = 330;
int f1 = 349;     //These are the frequency      
int g1 = 392;     //values of the different notes
int a1 = 440;   
int b1 = 494;

void setup() {//I declare whether I'm using the pins for input/output 
  pinMode(10,OUTPUT);
  pinMode(7,OUTPUT);
  pinMode(8,INPUT);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
   // Turn off autocalibrate on all channels:
  for(int i=0; i<4; ++i) {
    keys[i].set_CS_AutocaL_Millis(0xFFFFFFFF);
  }
  delay(500);
  Serial.begin(9600);
}
void Detect_button(){
  int notes1[] = {c,d,e,f,g,a,b,c2}; //An array storing all the notes. It's kind of like a dictionary.
  int notes2[] = {c1,d1,e1,f1,g1,a1,b1,c};
  long duration, distance; //Variables to store the values of time and length
  
  digitalWrite(tp,LOW);
  delayMicroseconds(2);         
  digitalWrite(tp,HIGH);      //This area sends out a pulse from the trigger
  delayMicroseconds(5);
  digitalWrite(tp,LOW);                 
  duration = pulseIn(ep, HIGH); //The echo is recieved, and saved as the duration
  
  distance = (duration/2)/29.1; // We convert the time into distance in centimeters, using the speed of sound and other factors.
  pev_button = button; //remember the previous button pressed by the user

     if(distance>3 && distance<37){
      if(fun%2 == 0){
        notes = notes1;
      }
      if(fun%2 ==1){
        notes = notes2;
      }
      if(distance>4&&distance<6){      //For a distance between 4 and 7, it plays C for 100 milliseconds
        tone(sp,notes[0],100);
        button = 8;}
      else 
        if(distance>8&&distance<10){
        tone(sp,notes[1],100); 
        button = 7;}     //For a distance between 8 and 11, it plays D for 100 milliseconds
      else
        if(distance>12&&distance<14){
        tone(sp,notes[2],100);
        button = 6;     
        }//For a distance between 12 and 15, it plays E for 100 milliseconds
      else
        if(distance>16&&distance<18){
        tone(sp,notes[3],100); 
        button = 5;  
        }//For a distance between 16 and 19, it plays F for 100 milliseconds
      else
        if(distance>20&&distance<22){
        tone(sp,notes[4],100);  
        button = 4;   
        }//For a distance between 20 and 23, it plays G for 100 milliseconds
      else
        if(distance>24&&distance<26){
        tone(sp,notes[5],100);  
        button = 3;   
         }//For a distance between 24 and 27, it plays A for 100 milliseconds
      else
        if(distance>28&&distance<30){
        tone(sp,notes[6],100);  
        button = 2;   
        }//For a distance between 28 and 31, it plays B for 100 milliseconds
      else
        if(distance>32&&distance<34){
        tone(sp,notes[7],100);  
        button = 1;   
        }//For a distance between 32 and 35, it plays high C for 100 milliseconds
        }
    else button = 0;
   
/****Record the pressed buttons in a array***/
  if (button != pev_button && pev_button != 0)
  {
    recorded_button[button_index] = pev_button;
    button_index++;
    recorded_button[button_index] = 0;
    button_index++;
  }
/**End of Recording program**/
} 

void Play_tone()
{

 /****Rcord the time delay between each button press in a array***/

  if (button != pev_button)
  {
   // lcd.clear(); //Then clean it
    note_time = (millis() - start_time) / 10;
    recorded_time[time_index] = note_time;
    time_index++;
    start_time = millis();
  }
  /**End of Recording program**/

}


void loop() {     //This is the main loop, that keeps repeating
    // If the capacitance reading is greater than the threshold, play a note:
    if(keys[0].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD){
       on++;
       delay(100);
      }
  
 // We convert the time into distance in centimeters, using the speed of sound and other factors.
  if(on%2 == 0){
    Intro();
  }             
  display.clearDisplay();
  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Piano ON : play it"));
  display.println(F(""));
  display.setTextColor(BLACK, WHITE);
  display.println(F("Change Mode : Press 2"));
  display.println(F(""));
  display.setTextColor(WHITE, BLACK);
  display.println(F("Currently : Practice"));
  display.println(F("Change Note: Press 3"));
  display.println(F("To Play Recorded : Press 4"));
  display.display();
   if(mode%2 == 0){
    for(;;){
          if(keys[0].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD){
           on++;
           loop();
           delay(100);
          }
          if(keys[1].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
          mode++;
          delay(100);
          }
          if(keys[2].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
          fun++;
          delay(100);
          }
          if(keys[3].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
            recm++;
            delay(100);
          }

       
      if(recm%2==0){
         display.clearDisplay();
         display.setTextSize(1);             // Normal 1:1 pixel scale
         display.setTextColor(WHITE);        // Draw white text
         display.setCursor(0,0);             // Start at top-left corner
         display.println(F("Piano ON : Now Recording..."));
         display.println(F(""));
         display.setTextColor(BLACK, WHITE);
         display.println(F("Change Mode : Press 2"));
         display.println(F("Change Scale: Press 3"));
         Detect_button();
         Play_tone();
       }
      
    if(mode%2 == 1){
        if(keys[0].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD){
           on++;
           loop();
           delay(100);
          }
          if(keys[1].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
          mode++;
          delay(100);
          }
          if(keys[2].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD) {
          fun++;
          delay(100);
          }
        display.clearDisplay();
        display.setTextSize(1);             // Normal 1:1 pixel scale
        display.setTextColor(WHITE);        // Draw white text
        display.setCursor(0,0);             // Start at top-left corner
        display.println(F("Piano ON : listen it"));
        display.println(F(""));
        display.setTextColor(BLACK, WHITE);
        display.println(F("Change Mode : Press 2"));
        display.println(F(""));
        display.setTextColor(WHITE, BLACK);
        display.println(F("Now: Harry Potter"));
        
        display.println(F("Change Song: Press 3"));
        display.display();
        LoadSong(1);
        
        display.clearDisplay();
        display.setTextSize(1);             // Normal 1:1 pixel scale
        display.setTextColor(WHITE);        // Draw white text
        display.setCursor(0,0);             // Start at top-left corner
        display.println(F("Piano ON : listen it"));
        display.println(F(""));
        display.setTextColor(BLACK, WHITE);
        display.println(F("Change Mode : Press 2"));
        display.println(F(""));
        display.setTextColor(WHITE, BLACK);
        display.println(F("Now: Twinkle Twinkle"));
        
        display.println(F("Change Song: Press 3"));
        display.display();
        LoadSong(2);

        display.clearDisplay();
        display.setTextSize(2);             // Normal 1:1 pixel scale
        display.setTextColor(WHITE);        // Draw white text
        display.setCursor(0,0);             // Start at top-left corner
        display.println(F("Oops!"));
        display.println(F(""));
        display.setTextColor(BLACK, WHITE);
        display.println(F("Playlist Over"));
        display.println(F(""));
        display.setTextColor(WHITE, BLACK);
        display.println(F("Now: Practice"));
        
        display.println(F("or Play again"));
        mode = 0; fun=0;
        display.display();
    }
      if(recm%2==1){
            display.clearDisplay();
            display.println(F("Now Playing Your Recorded Tune..."));
              for (int i = 0; i < sizeof(recorded_button) / 2; i++){
                delay((recorded_time[i]) * 10); //Wait for before paying next tune
                if (recorded_button[i] == 0)
                  noTone(sp); //user dint touch any button
                else
                  tone(sp, notes[(recorded_button[i] - 1)]); //play the sound corresponding to the button touched by the user
              }
            delay(100);
      }
    }
  }
}
void Intro(){
  display.clearDisplay();
  display.setTextSize(1); // Draw 2X-scale text
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println(F("Shivank Garg 160658"));
  display.println(F("Shruti Shukla 160667"));
  display.println(F(""));
  display.println(F("EE381A EC Lab"));
  display.println(F("The Music Launchpad"));
  display.println(F(""));
  display.setTextColor(BLACK, WHITE); // Draw 'inverse' text
  display.println(F("PRESS ON to play piano"));
  display.display();      // Show initial text
  // Scroll in various directi ons, pausing in-between:
    display.startscrollright(0x00, 0x0F);
    display.invertDisplay(true);
    delay(1000);
    display.invertDisplay(false);
    delay(1000);
    mode = 0; fun = 0;
    for(;;)
    if(keys[0].capacitiveSensor(NUM_OF_SAMPLES) > CAP_THRESHOLD || on%2==1){
       on++;
       display.stopscroll();
       break;
       delay(100);
      }
     
    return;
}
struct MusicStruct {
  int A = 550;int As = 582;int B = 617; int C = 654;  int Cs = 693;  int D = 734; int Ds = 777; int E = 824; int F = 873; 
  int Gs = 1003;int A2=1100;int A2s = 1165;int B2=1234;int C3 = 1308; int C3s = 1385; int D3 = 1555;int Fs = 925; int G = 980;
}Music;

struct LengthStruct {
  float half = 0.5;float one = 1.0;float one_half = 1.5;float two = 2.0;float two_half = 2.5;}Length;

void LoadSong(int load){
  if(load==1){
      int tempo2 = 400;
        setTone(sp, Music.B, tempo2 * Length.one);
        setTone(sp, Music.E, tempo2 * Length.one_half);
        setTone(sp, Music.G, tempo2 * Length.half);
        setTone(sp, Music.F, tempo2 * Length.one);
        setTone(sp, Music.E, tempo2 * Length.two);
        setTone(sp, Music.B2, tempo2 * Length.one);
        setTone(sp, Music.A2, tempo2 * Length.two_half);
        setTone(sp, Music.Fs, tempo2 * Length.two_half);
  
        setTone(sp, Music.E, tempo2 * Length.one_half);
        setTone(sp, Music.G, tempo2 * Length.half);
        setTone(sp, Music.F, tempo2 * Length.one);
        setTone(sp, Music.Ds, tempo2 * Length.two);
        setTone(sp, Music.F, tempo2 * Length.one);
        setTone(sp, Music.B, tempo2 * Length.two_half);
  }
  else if(load==2){
     char notes1[] = "ccggaag ffeeddc ggffeed ggffeed ccggaag ffeeddc "; // a space represents a rest
     int beats1[] = { 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 4 };
     int tempo1 = 300;
     int length = 15;
     for (int i = 0; i < length; i++) {
     if (notes1[i] == ' ') {
       delay(beats1[i] * tempo1); // rest
      } else {
       playNote(notes1[i], beats1[i] * tempo1);
      }
    
     // pause between notes
    delay(tempo1 / 2); 
    }
  }
  display.display();
}
void playTone(int tone, int duration) {
  for (long i = 0; i < duration * 1000L; i += tone * 2) {
    digitalWrite(sp, HIGH);
    delayMicroseconds(tone);
    digitalWrite(sp, LOW);
    delayMicroseconds(tone);
  }
}

void playNote(char note, int duration) {
char names[] = {'C', 'D', 'E', 'F', 'G', 'A', 'B', 'c', 'd', 'e', 'f', 'g', 'a', 'b','x', 'y' };
int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014,956,  834,  765,  593,  468,  346,  224,655 , 715 };
int SPEE = 5;
// play the tone corresponding to the note nam
    for (int i = 0; i < 16; i++) {
      if (names[i] == note) {
       int newduration = duration/SPEE;
       playTone(tones[i], newduration);
      }
    }
}
void setTone(int pin, int note, int duration) {
  tone(pin, note, duration);
  delay(duration);
  noTone(pin);
}
